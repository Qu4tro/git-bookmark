#!/usr/bin/env bash

# shellcheck disable=SC2154

set -o errexit   # abort on nonzero exitstatus
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes
# set -o xtrace



eval "$(
  docopts -V - -h - : "$@" <<EOF
Usage:
    git-bookmark init [--session=<name>] [--branch=<name>] [--gitv]
    git-bookmark add  [--session=<name>] [--branch=<name>] [--gitv] <url>...
    git-bookmark edit [--session=<name>] [--branch=<name>] [--gitv] [--editor=<executable>] [--message=<message>]
    git-bookmark open [--session=<name>] [--branch=<name>] [--gitv] [--browser=<executable>]
    git-bookmark list [--session=<name>] [--branch=<name>] [--gitv]
    git-bookmark -h | --help
    git-bookmark --version

    Options:
    -h --help               Displays this screen.
    --version               Displays version information.

    --session=<name>        Name of the bookmark file
                            [default: links].

    --branch=<name>         Name of the branch to look for the bookmark file
                            [default: bookmarks].

    --editor=<executable>   Editor to use when editing a bookmark file
                            [default: $EDITOR].

    --message=<message>     Commit message when editing.
                            When ommited it will prompt like git does.

    --browser=<executable>  Browser to use when opening from a bookmark file
                            [default: $BROWSER].

    --gitv                  Show all of the underlyings git commands stderr.

----
  git-bookmark 0.1.0
  Copyright (C) 2020 Xavier Francisco
  License MIT
  This is free software: you are free to change and redistribute it.
  There is NO WARRANTY, to the extent permitted by law.
EOF
)"

require_git_repo() {
  # Abort when a git repo isn't found
  if ! _git rev-parse --git-dir >/dev/null; then
    echo "Not inside a git repo. Aborting"
    exit 1
  fi
}

_git() {
  if "$gitv"; then
    { git "$@" ; }
  else
    { git "$@" ; } 2> /dev/null
  fi
}


enter_branch() {
  # Enter the branch to work with
  clone="$(mktemp --directory)"
  if ! _git clone . --branch="$branch" "$clone"; then
    echo 'Bookmark branch not initialized. Aborting.'
    echo ''
    echo "Tip: Run 'git bookmark init'"
    exit 1
  fi

  # Change directory to our cloned repo
  cd "$clone" > /dev/null || exit 1
}

_git_acp() {
  _git add "$session"
  _git commit "$@"
  _git push origin "$branch"
}

list_bookmarks() {
  # Read our bookmarks file
  # Strip: comments, empty lines, leading&trailing spaces
  sed --expression 's/\s*#.*$//' \
      --expression 's/^ *//; s/ *$//; /^$/d' \
      "$session"
}

# Begin
require_git_repo

# When Initiating
if $init; then
  original="$(git rev-parse --show-toplevel)"
  clone="$(mktemp --directory)"
  cd "$clone" > /dev/null || exit 1

  _git init > /dev/null
  _git remote add origin "$original"
  _git checkout -b "$branch"

  touch "$session"
  _git_acp --message "Initial Commit" --allow-empty


# When Adding
elif $add; then
  enter_branch
  for u in "${url[@]}"; do
    echo "${u}" >> "$session"
  done
  _git_acp --message "Added ${#url[@]} new bookmarks"

# When Editing
elif $edit; then
  enter_branch
  "$editor" "$session"
  if [ -z "$message" ]; then
    _git_acp
  else
    _git_acp --message "$message"
  fi

# When Opening
elif $open; then
  enter_branch
  list_bookmarks | xargs "$browser"

# When Listing
elif $list; then
  enter_branch
  list_bookmarks
fi
